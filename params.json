{"name":"LiteDB","tagline":"LiteDB - A .NET NoSQL Document Store in a single data file","body":"# LiteDB - A .NET NoSQL Document Store in a single data file\r\n\r\nLiteDB is a small, fast and lightweight NoSQL embedded database. \r\n\r\n- Serverless NoSQL Document Store\r\n- Simple API similar to MongoDB\r\n- 100% C# code for .NET 4 in a single DLL (less then 200kb)\r\n- Transaction control - ACID\r\n- Recovery in writing failure (journal mode)\r\n- Store POCO classes or `BsonDocument`\r\n- Store files and stream data (like GridFS in MongoDB)\r\n- Single data file storage (like SQLite)\r\n- Index document fields for fast search (up to 16 indexes per collection)\r\n- LINQ support for queries\r\n- Shell command line - [try this online version](http://litedb.azurewebsites.net/)\r\n- Open source and free for everyone - including commercial use\r\n- Install from NuGet: `Install-Package LiteDB`\r\n\r\n## Try online\r\n\r\n[Try LiteDB Web Shell](http://litedb.azurewebsites.net/). For security reasons, in online version not all commands are available. Try offline version for full features tests.\r\n\r\n## Documentation\r\n\r\nVisit [Wiki for full documentation](https://github.com/mbdavid/LiteDB/wiki)\r\n\r\n## Download\r\n\r\nDownload source code or binary only in [LiteDB Releases](https://github.com/mbdavid/LiteDB/releases)\r\n\r\n## How to use LiteDB\r\n\r\nA quick example for store and search documents:\r\n\r\n```C#\r\n// Create your POCO class\r\npublic class Customer\r\n{\r\n    public int Id { get; set; }\r\n    public string Name { get; set; }\r\n    public string[] Phones { get; set; }\r\n    public bool IsActive { get; set; }\r\n}\r\n\r\n// Open database (or create if not exits)\r\nusing(var db = new LiteDatabase(@\"C:\\Temp\\MyData.db\"))\r\n{\r\n\t// Get customer collection\r\n\tvar col = db.GetCollection<Customer>(\"customers\");\r\n\r\n    // Create your new customer instance\r\n\tvar customer = new Customer\r\n    { \r\n        Name = \"John Doe\", \r\n        Phones = new string[] { \"8000-0000\", \"9000-0000\" }, \r\n        IsActive = true\r\n    };\r\n\t\r\n\t// Insert new customer document (Id will be auto-incremented)\r\n\tcol.Insert(customer);\r\n\t\r\n\t// Update a document inside a collection\r\n\tcustomer.Name = \"Joana Doe\";\r\n\t\r\n\tcol.Update(customer);\r\n\t\r\n\t// Index document using a document property\r\n\tcol.EnsureIndex(x => x.Name);\r\n\t\r\n\t// Use Linq to query documents\r\n\tvar results = col.Find(x => x.Name.StartsWith(\"Jo\"));\r\n}\r\n```\r\n\r\n## Where to use?\r\n\r\n- Desktop/local small applications\r\n- Application file format\r\n- Small web applications\r\n- One database **per account/user** data store\r\n- Few concurrency write users operations\r\n\r\n\r\n## Changelog\r\n\r\nDetails changes for each release are documented in the [release notes](https://github.com/mbdavid/LiteDB/releases).\r\n\r\n## License\r\n\r\n[MIT](http://opensource.org/licenses/MIT)\r\n\r\nCopyright (c) 2015 - Maur√≠cio David","google":"UA-54329029-1","note":"Don't delete this file! It's used internally to help with page regeneration."}
{"name":"LiteDB","tagline":"LiteDB - A .NET NoSQL Document Store in a single data file","body":"# LiteDB - A .NET NoSQL Document Store\r\n\r\nSame LiteDB features:\r\n\r\n- Serverless NoSQL Document Store\r\n- Simple API similar to MongoDB\r\n- 100% C# code for .NET 3.5 in a single DLL - install from NuGet: `Install-Package LiteDB`\r\n- Transaction control - ACID\r\n- Recovery in writing failure (journal mode)\r\n- Use with POCO class or BsonDocument\r\n- Store file `Stream` too (like GridFS in MongoDB)\r\n- Single data file storage (like SQLite)\r\n- Up to 8 indexes per collection\r\n- Open source and free for everyone - including commercial use\r\n\r\n## How to use\r\n\r\nDocument are storage in collections. Each collection have many documents with same type. Each document have an Id (like 'Primary Key' on relation databases).\r\n\r\n```C#\r\n// Open data file (or create if not exits)\r\nusing(var db = new LiteEngine(@\"C:\\Temp\\myUserDb.ldb\"))\r\n{\r\n    // Get a collection (or create, if not exits)\r\n    var customers = db.GetCollection<Customer>(\"customers\");\r\n    \r\n    // Insert new document, using 'int' ID \r\n    var cust = customers.Insert(1, new Customer { Name = \"John Doe\" });\r\n    \r\n    // Update a document inside a collection\r\n    cust.Name = \"Joana Doe\";\r\n    \r\n    customers.Update(id, cust);\r\n    \r\n    // Delete a document\r\n    customers.Delete(id);\r\n}\r\n```\r\n\r\n## Query\r\n\r\nIn LiteDB, queries use indexes to search documents. At this moment, LiteDB do not support Linq, only `Query` helper class to create indexed query results. But, the result itÂ´s a `IEnumerable<T>`, so you can Linq after query execute.\r\n\r\n```C#\r\nvar customers = db.GetCollection<Customer>(\"customers\");\r\n\r\n// Create a new index (if not exists)\r\ncustomers.EnsureIndex(\"Name\");\r\n\r\n// Query documents using 'Name' index\r\nvar results = customers.Find(Query.StartsWith(\"Name\", \"John\"));\r\n\r\n// Return document by ID (PK index)\r\nvar customer = customers.FindById(1);\r\n\r\n// Count only documents where ID >= 2\r\nvar count = customers.Count(Query.GTE(\"_id\", 2));\r\n\r\n// All query results returns an IEnumerable<T>, so you can use Linq after\r\nvar linq = customers.Find(Query.Between(\"Salary\", 500, 1000)) \r\n    .Where(x => x.LastName.Length > 5 && x.Age > 22)\r\n    .Select(x => new { x.Name, x.Salary })\r\n    .OrderBy(x => x.Name);\r\n```\r\n\r\n`Query` class supports `All`, `Equals`, `Not`, `GreaterThan`, `LessThan`, `Between`, `In`, `StartsWtih`, `AND` and `OR`. All operations use an index.\r\n\r\n##Transactions\r\n\r\nAll write operations are created inside a transaction. If you do not use `BeginTrans` and `Commit`, transaction are implicit for each operation.\r\n\r\nFor simplicity, LiteDB do not support concurrency transactions. LiteDB locks your datafile to guarantee that 2 users are not changing data at same time.\r\n\r\nIf there is any error during write data file, journaling save a redo log file with database dirty pages, to recovery your datafile when datafile open again. \r\n\r\n```C#\r\nusing(var db = new LiteEngine(dbpath))\r\n{\r\n    db.BeginTrans();\r\n    \r\n    // do many write operations (insert, updates, deletes)...\r\n    \r\n    if(...)\r\n    {\r\n        db.Rollback(); // Discard all dirty pages - no data file changes\r\n    }\r\n    else\r\n    {\r\n        db.Commit(); // Persist dirty pages to disk (use journal redo log file)\r\n    }\r\n}\r\n```\r\n\r\n## BsonDocument\r\n\r\nYou can use POCO class (as showed before) or `BsonDocument` to store scheme less documents. Document size limit is 256Kb for each document.\r\n\r\n```C#\r\nusing(var db = new LiteEngine(connectionString))\r\n{\r\n    // Create a BsonDocument and populate\r\n    var doc = new BsonDocument();\r\n    doc[\"Name\"] = \"John Doe\";\r\n    doc[\"Phones\"] = new BsonArray();\r\n    doc[\"Phones\"].Add(\"55(51)9900-0000\");\r\n    \r\n    // Get the collection\r\n    var col = db.GetCollection(\"customers\");\r\n    \r\n    col.Insert(1, doc);\r\n    \r\n    Debug.Print(\"Nome: \" + doc[\"Name\"].AsString);\r\n    Debug.Print(\"Phone:\" + doc[\"Phones\"][0].AsString);\r\n}\r\n```\r\n\r\n## Storing Files\r\n\r\nSametimes we need store files in database. For this, LiteDB has a special `Files` collection to store files without document size limit (file limit is 2Gb per file).\r\n\r\n```C#\r\n// Storing a file stream inside database with metadata related\r\ndb.Files.Store(\"folder/image.png\", stream, metadata);\r\n\r\n// Get file reference using key\r\nvar file = db.Files.FindById(\"folder/image.png\");\r\n\r\n// Find all files using StartsWith\r\nvar files = db.Files.Find(\"folder/\");\r\n\r\n// Get file stream\r\nvar stream = file.OpenRead(db);\r\n```\r\n\r\n## Connection String\r\n\r\nConnection string options to initialize LiteEngine class:\r\n- **Filename**: Path for datafile. You can use only path as connection string (required)\r\n- **Timeout**: timeout for wait for unlock datafile (default: 00:01:00)\r\n- **Journal**: Enabled journal mode - recovery support (default: true)\r\n- **MaxFileLength**: Max datafile length, in bytes (default: 4TB)\r\n\r\n\r\n## Where to use?\r\n\r\n- Desktop/local applications\r\n- Small web applications\r\n- One datafile **per account/user** data store\r\n- Few concurrency write users operations\r\n\r\n## Dependency\r\n\r\nLiteDB has no external dependency, but use [fastBinaryJson](http://fastbinaryjson.codeplex.com/) as Bson converter (included inside LiteDB source).\r\n\r\n## Roadmap\r\n\r\nCurrently, LiteDB is in early development version. There are many tests to be done before ready for production. Please, be careful on use.\r\n\r\nSame features/ideas for future\r\n\r\n- More tests!!\r\n- A repository pattern\r\n- Linq support OR string query engine\r\n- Compound index: one index for multiple fields\r\n- Multikey index: index for array values\r\n- Full text search\r\n- Simple admin GUI program\r\n\r\n","google":"UA-54329029-1","note":"Don't delete this file! It's used internally to help with page regeneration."}
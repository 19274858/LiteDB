using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace LiteDB.Tests
{
    /// <summary>
    /// Sequencial works like Random class, but with a fixed sequence that always returns same value in order.
    /// Used in UnitTests
    /// </summary>
    public class Sequencial
    {
        private int _index = 0;

        private int[] _serie = new int[] 
        {
            #region Fixed 1000 integers
            356,302,134,677,207,689,226,14,676,727,496,840,880,293,79,352,217,706,41,101,654,493,980,970,777,
            41,672,163,14,899,134,36,42,218,969,668,378,530,271,238,31,780,30,707,532,209,373,490,937,55,
            680,909,528,32,241,862,322,163,900,165,16,62,999,777,592,459,797,661,323,410,973,687,435,802,69,
            873,463,273,438,567,667,182,226,959,218,225,508,10,977,106,346,215,630,105,221,969,781,253,114,72,
            411,712,166,526,81,993,473,725,962,368,399,49,725,332,498,834,836,39,558,367,951,787,684,216,64,
            758,57,329,581,99,91,209,158,365,155,955,15,699,878,225,751,782,47,608,706,296,490,297,607,387,
            133,742,695,747,121,624,27,949,462,323,935,144,144,863,276,190,890,359,177,543,818,136,161,332,615,
            168,739,75,509,767,268,759,722,193,966,349,514,411,243,530,927,66,237,554,289,607,638,184,332,516,
            405,130,120,64,568,996,581,362,131,952,884,952,439,694,55,175,421,950,897,927,676,479,115,646,615,
            752,899,606,42,8,530,555,743,993,362,138,639,658,625,969,768,151,279,291,645,975,626,542,499,113,
            186,687,287,405,840,926,14,473,448,815,97,975,319,122,422,329,208,446,332,916,535,762,325,927,158,
            525,199,824,0,640,126,356,106,928,822,842,268,337,153,435,124,166,210,809,872,793,831,157,869,316,
            766,180,210,583,578,423,362,359,246,315,726,189,472,807,689,740,868,391,300,579,61,871,292,896,792,
            369,552,515,55,365,693,42,955,684,874,946,146,523,350,398,480,909,91,838,709,934,693,402,120,132,
            924,440,856,290,254,895,887,314,790,208,871,846,303,880,621,684,234,788,933,743,594,345,40,901,98,
            152,779,454,187,858,675,149,395,923,441,253,185,664,430,979,58,831,732,142,527,634,605,210,216,24,
            700,905,469,376,538,578,400,955,191,101,115,432,127,932,532,721,450,379,439,367,499,569,357,954,684,
            762,612,897,373,464,546,569,237,162,158,770,680,19,385,862,853,229,472,328,863,626,704,800,609,806,
            183,225,770,849,525,130,547,514,691,775,966,502,582,727,555,546,194,964,774,762,41,431,994,577,514,
            269,96,29,91,58,58,811,287,567,281,321,798,388,636,27,222,165,327,609,895,351,647,745,773,316,
            431,739,26,847,764,751,231,193,334,256,33,517,423,633,717,154,214,14,445,234,748,806,328,746,539,
            875,104,384,681,163,622,351,256,774,627,318,784,440,802,530,89,604,54,380,994,705,742,693,892,741,
            136,632,299,539,568,625,411,280,308,889,646,846,512,171,634,682,261,649,5,398,369,774,212,915,144,
            143,751,947,752,834,133,410,492,940,26,989,51,717,205,2,907,504,131,912,883,242,92,882,746,311,
            443,92,687,493,371,362,419,384,394,425,873,463,528,474,755,235,354,571,144,644,630,543,443,3,491,
            865,642,299,32,901,50,869,201,440,390,41,722,998,568,664,569,667,322,780,128,443,976,656,156,647,
            887,520,738,101,681,900,648,684,2,506,719,120,351,492,374,4,262,87,84,714,512,356,3,479,74,
            963,220,663,874,47,888,985,142,384,14,529,130,99,759,490,392,38,996,62,945,449,315,830,405,124,
            181,888,572,442,134,531,517,258,26,717,679,984,809,954,617,733,977,967,478,844,873,162,328,594,322,
            474,359,941,534,624,647,390,258,750,865,0,413,700,249,482,12,871,73,41,810,407,229,41,444,211,
            472,347,351,561,251,19,559,978,119,660,172,576,724,401,69,288,726,58,89,617,319,276,718,996,831,
            2,88,286,783,914,244,317,496,322,152,300,39,697,499,845,440,435,581,588,309,436,147,671,972,522,
            680,170,952,827,891,196,629,355,729,248,930,273,195,204,416,854,79,401,249,769,249,29,559,243,176,
            884,695,129,686,395,854,417,314,260,233,73,364,668,430,956,671,683,968,250,914,167,239,376,172,455,
            356,746,421,202,273,651,610,709,650,7,500,499,669,333,394,513,958,934,970,342,490,411,970,293,98,
            565,61,309,328,9,644,319,957,231,39,108,995,112,987,582,462,654,17,423,455,171,14,634,855,401,
            209,305,405,829,964,945,775,128,104,707,589,301,381,641,362,181,541,438,294,286,517,845,947,388,879,
            835,393,546,837,926,551,426,454,927,800,339,914,127,266,93,332,867,7,279,992,161,273,376,61,274,
            630,575,340,569,883,363,358,16,950,129,551,228,290,177,156,163,847,454,841,22,266,413,171,200,954,
            650,838,667,395,718,561,16,485,562,296,975,86,884,43,436,981,897,177,137,541,103,576,829,122,829
            #endregion
        };

        public Sequencial(int initial)
        {
            if (initial < 0 || initial > 100) throw new ArgumentException("Initial must be 0-100");

            _index = initial;
        }

        public double Next()
        {
            _index++;

            if (_index >= _serie.Length) _index = 0;

            return (double)_serie[_index] / 1000;
        }

        public int Next(int min, int max)
        {
            var v = this.Next();
            return (int)(((double)(max - min) * v) + (double)min);
        }
    }
}